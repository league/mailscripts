#!/usr/bin/env zsh
## spam-auto-learn -- feed designated mail folders to bayesian learner
## Written by and for Christopher League <league@contrapunctus.net>
## but released to the public domain.

## This zsh script will train the SpamAssassin Bayseian database based
## on how messages are refiled.  We assume that all SA-marked messages
## go into a particular folder (junk/auto) and that any it misses the
## human will refile in a different folder (junk/spam).  If the user
## has any other mailboxes, it is assumed that they contain non-spam.
## The script invokes sa-learn as needed on each mailbox, and cleans
## up the junk folder so that spam doesn't accumulate.  It can be run
## site-wide by root to allow several cooperating users to feed the
## shared database, or it can be run by any one particular user for a
## private database -- see the comments below.

## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

setopt extended_glob            # leave these alone; they are needed
setopt no_glob_assign           # for $ham_pattern to work.
setopt glob_subst
setopt null_glob

                        ### Site settings ###

mail_dir=mail                   # where mail is stored in each home dir
auto_spam=junk/auto             # mbox containing SA-marked spam
missed_spam=junk/spam           # mbox containing human-marked spam

## A pattern that matches everything EXCEPT the junk mailboxes.  To
## save some effort, we only hit ones that have been modified in the
## last 4 days.  The noglob and typeset keywords convince zsh not to
## expand the extended wildcards yet.
noglob typeset ham_pattern=(^junk/)#*(.m-3)

## If run site-wide, the sa-learn command needs to know where to find
## the Bayes database (--dbpath) and what user owns it (--username).
## Comment out all but the first line if run by non-root user.
spam_home=/var/lib/spamassassin/.spamassassin
spam_user=spamd
spam_group=spamd
learn=(sa-learn --dbpath $spam_home --username $spam_user)

## Which user accounts contribute to learning?  By default, take them
## from command-line.  Or hard-code them here if you want.
users=($*)

                       ### Helper functions ###

## Maybe run a command; maybe print it instead.  If this script is run
## with DRYRUN set (to anything except empty string), it will avoid
## taking any real actions, and just print the commands.
run() {
    if [[ -z $DRYRUN ]]; then   # do it for real
        $*
    else                        # output only
        print '%' $*
    fi
}

## Run a command, but exit with message on error.
guard() {
    run $*
    if [[ $? != 0 ]]; then
        print "FATAL($?): $*"
        exit $?
    fi
}

## Moves FILE to FILE.old, and creates empty FILE with same owner and
## permissions.
rotate_file() {                 # /PATH/TO/FILE
    guard mv $1 $1.old
    guard touch $1
    guard chown --reference $1.old $1
    guard chmod --reference $1.old $1
}

                       ### Primary actions ###

## The automatic spam mailbox gets rotated to .old (clobbering the
## former .old) and cleaned out.  This way, false positives will
## remain for 2 cycles before they disappear entirely.
rotate_auto_spam() {             # /PATH/TO/MAILBOX
    print '\n## Rotating automatic spam mailboxes'
    if [[ -f $1 ]]; then
        guard lockfile $1.lock
        rotate_file $1
        guard rm -f $1.lock
    else
        print warning: non-existent: $1
    fi
}

## Learn from the mailbox of user-marked spam, that SA missed.  We
## don't keep around the .old; assume user knows what he's doing.
learn_missed_spam() {           # /PATH/TO/MAILBOX
    print '\n## Learning from missed spam mailbox'
    if [[ -f $1 ]]; then
        guard lockfile $1.lock
        guard $learn --spam --mbox $1
        rotate_file $1
        guard rm -f $1.old $1.lock
    else
        print warning: non-existent: $1
    fi
}

## Other messages refiled by user are assumed to be ham.  Learn from
## them.  It's expensive to go over the same mail again and again, so
## it's helpful to include a glob qualifier in ham_pattern that
## excludes mailboxs with no recent modifications, and to archive the
## mailboxes every year or so.
learn_all_ham() {               # ~USER/MAILDIR
    print '\n## Learning ham'
    for f in $1/$ham_pattern; do
        print "# $f"
        guard lockfile $f.lock
        guard $learn --ham --mbox $f
        guard rm -f $f.lock
    done
}

                          ### Main loop ###

for u in $users; do
    print '\n#### Learning from user' $u
    user_mail_dir=~$u/$mail_dir
    if [[ -d $user_mail_dir ]]; then
        rotate_auto_spam $user_mail_dir/$auto_spam
        learn_missed_spam $user_mail_dir/$missed_spam
        learn_all_ham $user_mail_dir
    else
        print warning: non-existent: $user_mail_dir
    fi
done
## Fix the DB ownership
print restoring $spam_user ownership
chown $spam_user:$spam_group $spam_home/*

exit 0
